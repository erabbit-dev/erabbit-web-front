{"version":3,"sources":["webpack:///./src/views/login/components/login-footer.vue","webpack:///./src/views/login/components/login-footer.vue?dcc2","webpack:///./src/views/login/components/login-header.vue?2d83","webpack:///./src/views/login/components/login-footer.vue?9891","webpack:///./node_modules/vee-validate/dist/vee-validate.esm.js","webpack:///./src/utils/vee-validate-schema.js","webpack:///./src/api/user.js","webpack:///./src/views/login/components/login-header.vue","webpack:///./src/views/login/components/login-header.vue?6f90"],"names":["class","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3","name","__exports__","render","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","resolveRule","id","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isClient","window","isLocator","__locatorRef","isTypedSchema","parse","__type","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","isEqual","a","b","constructor","i","Map","size","entries","has","get","isFile","lastModified","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key","File","set","val","klona","enumerable","configurable","writable","defineProperty","x","k","list","tmp","str","create","__proto__","forEach","add","Date","buffer","slice","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","_","idx","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","warn","message","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","findIndex","v","push","throttle","func","limit","inThrottle","lastResult","args","context","this","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","clearTimeout","result","r","Promise","resolve","applyModelModifiers","modifiers","number","withLatest","onDone","latestRun","async","pending","computedDeep","baseRef","newValue","deep","unravel","lazyToRef","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","extractLocators","DEFAULT_CONFIG","generateMessage","field","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","shouldBail","label","formData","values","_validate","errors","valid","validateFieldWithTypedSchema","ctx","form","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","isYupError","err","yupToTypedSchema","yupSchema","schema","output","abortEarly","typedSchema","messages","validator","Error","fillTargetValues","fieldCtx","normalize","param","validateTypedSchema","validationResult","results","m","validateObjectSchema","opts","paths","validations","_c","strings","names","fieldResult","bailsMap","isAllValid","validationResults","all","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","modelRef","resolveInitialValue","initialValues","stageInitialValue","resolveModelValue","setFieldValue","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","API","sendInspectorState","INSPECTOR_ID","sendInspectorTree","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","controlled","keepValueOnUnmount","modelPropName","syncVModel","controlForm","normalizeOptions","injectedForm","markedForRemoval","useVModel","handleChange","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","e","shouldValidate","setTouched","isTouched","unwatchValue","lastWatchedValue","watchValue","oldVal","validateFn","resetField","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","isVModelSynced","getCurrentModelValue","valueProp","standalone","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","propName","emitName","props","emit","propValue","modelModifiers","FieldImpl","inheritAttrs","as","String","required","Function","keepValue","validateField","onChangeHandler","handleInput","onInputHandler","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","expose","reset","children","_d","Field","FORM_COUNTER","resolveInitialValues","providedValues","validationSchema","cast","useForm","formId","controlledModelPaths","RESET_LOCK","fieldsByPath","isSubmitting","submitCount","fieldArrays","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","keepValuesOnUnmount","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","controlledValues","debouncedSilentValidation","_validateSchema","debouncedValidation","formResult","fieldsById","formCtx","currentErrorsPaths","validation","setFieldError","applyFieldMutation","f","wasValidated","some","makeSubmissionFactory","onlyControlled","onValidationError","preventDefault","stopPropagation","then","submittedValues","setFieldTouched","setValues","resetForm","returnVal","handleSubmitImpl","handleSubmit","withControlled","registerField","unregisterField","unsetInitialValue","setFieldInitialValue","useFieldModel","isFieldGroup","mutation","mutateAllFields","fields","force","fieldInstance","clonedValue","createModel","newValues","insertFieldAtPath","rawField","fieldPath","fieldAtPath","removeFieldFromPath","newPath","oldPath","initialErrorMessage","isGroup","shouldKeepValue","currentGroupValue","isSameGroup","valueIdx","every","updateOriginal","schemaValue","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","getValues","getMeta","getErrors","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","getCurrentValues","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","afterMutation","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","fieldsValues","role","account","data","userAccountCheck","password","rePassword","mobile","code","isAgree","userAccountLogin","request","userMobileLoginMsg","userMobileLogin","userQQLogin","unionId","userQQBindCode","userQQBindLogin","userQQPatchCode","userQQPatchLogin","_createElementVNode","_createVNode","_component_RouterLink","to","_hoisted_4","_renderSlot","_ctx","$slots","_hoisted_5","_hoisted_6"],"mappings":"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","file":"js/chunk-67da16d6.0bde4345.js","sourcesContent":["<template>\n  <footer class=\"login-footer\">\n    <div class='container'>\n      <p>\n        <a href=\"javascript:;\">关于我们</a>\n        <a href=\"javascript:;\">帮助中心</a>\n        <a href=\"javascript:;\">售后服务</a>\n        <a href=\"javascript:;\">配送与验收</a>\n        <a href=\"javascript:;\">商务合作</a>\n        <a href=\"javascript:;\">搜索推荐</a>\n        <a href=\"javascript:;\">友情链接</a>\n      </p>\n      <p>CopyRight &copy; 小兔鲜儿</p>\n    </div>\n  </footer>\n</template>\n\n<script>\nexport default {\n  name: 'LoginFooter'\n}\n</script>\n\n<style scoped lang='less'>\n.login-footer {\n  padding: 30px 0 50px;\n  background: #fff;\n  p {\n    text-align: center;\n    color: #999;\n    padding-top: 20px;\n    a {\n      line-height: 1;\n      padding:0 10px;\n      color: #999;\n      display: inline-block;\n      ~ a {\n        border-left: 1px solid #ccc;\n      }\n    }\n  }\n}\n</style>\n","import { render } from \"./login-footer.vue?vue&type=template&id=17badf56&scoped=true\"\nimport script from \"./login-footer.vue?vue&type=script&lang=js\"\nexport * from \"./login-footer.vue?vue&type=script&lang=js\"\n\nimport \"./login-footer.vue?vue&type=style&index=0&id=17badf56&scoped=true&lang=less\"\n\nimport exportComponent from \"/home/runner/work/erabbit-web-front/erabbit-web-front/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-17badf56\"]])\n\nexport default __exports__","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../../../node_modules/less-loader/dist/cjs.js??ref--11-oneOf-1-3!../../../../node_modules/style-resources-loader/lib/index.js??ref--11-oneOf-1-4!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./login-header.vue?vue&type=style&index=0&id=c5a0b528&scoped=true&lang=less\"","export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../../../node_modules/less-loader/dist/cjs.js??ref--11-oneOf-1-3!../../../../node_modules/style-resources-loader/lib/index.js??ref--11-oneOf-1-4!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./login-footer.vue?vue&type=style&index=0&id=17badf56&scoped=true&lang=less\"","/**\n  * vee-validate v4.8.6\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, ref, watch, unref, isRef, reactive, onUnmounted, nextTick, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n    return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n    return Number(value) >= 0;\n}\nfunction toNumber(value) {\n    const n = parseFloat(value);\n    return isNaN(n) ? value : n;\n}\n\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n    // makes sure new rules are properly formatted.\n    guardExtend(id, validator);\n    RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n    return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n    if (isCallable(validator)) {\n        return;\n    }\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n    return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n    return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n    return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n    return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n    return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    }\n    return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n    return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n    return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n    return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n    if (!evt) {\n        return false;\n    }\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n        return true;\n    }\n    // this is for IE and Cypress #3161\n    /* istanbul ignore next */\n    if (evt && evt.srcElement) {\n        return true;\n    }\n    return false;\n}\nfunction isPropPresent(obj, prop) {\n    return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (a.constructor !== b.constructor)\n            return false;\n        // eslint-disable-next-line no-var\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!isEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            for (i of a.entries())\n                if (!isEqual(i[1], b.get(i[0])))\n                    return false;\n            return true;\n        }\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\n        // #3911\n        if (isFile(a) && isFile(b)) {\n            if (a.size !== b.size)\n                return false;\n            if (a.name !== b.name)\n                return false;\n            if (a.lastModified !== b.lastModified)\n                return false;\n            if (a.type !== b.type)\n                return false;\n            return true;\n        }\n        if (a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            return true;\n        }\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        if (a.constructor === RegExp)\n            return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf)\n            return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString)\n            return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length)\n            return false;\n        for (i = length; i-- !== 0;)\n            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))\n                return false;\n        for (i = length; i-- !== 0;) {\n            // eslint-disable-next-line no-var\n            var key = keys[i];\n            if (!isEqual(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    // eslint-disable-next-line no-self-compare\n    return a !== a && b !== b;\n}\nfunction isFile(a) {\n    if (!isClient) {\n        return false;\n    }\n    return a instanceof File;\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nfunction cleanupNonNestedPath(path) {\n    if (isNotNestedPath(path)) {\n        return path.replace(/\\[|\\]/gi, '');\n    }\n    return path;\n}\nfunction getFromPath(object, path, fallback) {\n    if (!object) {\n        return fallback;\n    }\n    if (isNotNestedPath(path)) {\n        return object[cleanupNonNestedPath(path)];\n    }\n    const resolvedValue = (path || '')\n        .split(/\\.|\\[(\\d+)\\]/)\n        .filter(Boolean)\n        .reduce((acc, propKey) => {\n        if (isContainerValue(acc) && propKey in acc) {\n            return acc[propKey];\n        }\n        return fallback;\n    }, object);\n    return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n    if (isNotNestedPath(path)) {\n        object[cleanupNonNestedPath(path)] = value;\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, set it\n        if (i === keys.length - 1) {\n            acc[keys[i]] = value;\n            return;\n        }\n        // Key does not exist, create a container for it\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            // container can be either an object or an array depending on the next key if it exists\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n        }\n        acc = acc[keys[i]];\n    }\n}\nfunction unset(object, key) {\n    if (Array.isArray(object) && isIndex(key)) {\n        object.splice(Number(key), 1);\n        return;\n    }\n    if (isObject(object)) {\n        delete object[key];\n    }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n    if (isNotNestedPath(path)) {\n        delete object[cleanupNonNestedPath(path)];\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, unset it\n        if (i === keys.length - 1) {\n            unset(acc, keys[i]);\n            break;\n        }\n        // Key does not exist, exit\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            break;\n        }\n        acc = acc[keys[i]];\n    }\n    const pathValues = keys.map((_, idx) => {\n        return getFromPath(object, keys.slice(0, idx).join('.'));\n    });\n    for (let i = pathValues.length - 1; i >= 0; i--) {\n        if (!isEmptyContainer(pathValues[i])) {\n            continue;\n        }\n        if (i === 0) {\n            unset(object, keys[0]);\n            continue;\n        }\n        unset(pathValues[i - 1], keys[i - 1]);\n    }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n    return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n    const vm = getCurrentInstance();\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n    warn$1(`[vee-validate]: ${message}`);\n}\n/**\n * Ensures we deal with a singular field value\n */\nfunction normalizeField(field) {\n    if (Array.isArray(field)) {\n        return field[0];\n    }\n    return field;\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n    if (Array.isArray(currentValue)) {\n        const newVal = [...currentValue];\n        // Use isEqual since checked object values can possibly fail the equality check #3883\n        const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n        return newVal;\n    }\n    return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n    let inThrottle;\n    let lastResult;\n    return function (...args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const context = this;\n        if (!inThrottle) {\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n            lastResult = func.apply(context, args);\n        }\n        return lastResult;\n    };\n}\nfunction debounceAsync(inner, ms = 0) {\n    let timer = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        if (timer) {\n            window.clearTimeout(timer);\n        }\n        timer = window.setTimeout(() => {\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n        }, ms);\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\nfunction applyModelModifiers(value, modifiers) {\n    if (!isObject(modifiers)) {\n        return value;\n    }\n    if (modifiers.number) {\n        return toNumber(value);\n    }\n    return value;\n}\nfunction withLatest(fn, onDone) {\n    let latestRun;\n    return async function runLatest(...args) {\n        const pending = fn(...args);\n        latestRun = pending;\n        const result = await pending;\n        if (pending !== latestRun) {\n            return result;\n        }\n        latestRun = undefined;\n        onDone(result, args);\n        return result;\n    };\n}\nfunction computedDeep({ get, set }) {\n    const baseRef = ref(klona(get()));\n    watch(get, newValue => {\n        if (isEqual(newValue, baseRef.value)) {\n            return;\n        }\n        baseRef.value = klona(newValue);\n    }, {\n        deep: true,\n    });\n    watch(baseRef, newValue => {\n        if (isEqual(newValue, get())) {\n            return;\n        }\n        set(klona(newValue));\n    }, {\n        deep: true,\n    });\n    return baseRef;\n}\nfunction unravel(value) {\n    if (isCallable(value)) {\n        return value();\n    }\n    return unref(value);\n}\nfunction lazyToRef(value) {\n    return computed(() => unravel(value));\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst normalizeChildren = (tag, context, slotProps) => {\n    if (!context.slots.default) {\n        return context.slots.default;\n    }\n    if (typeof tag === 'string' || !tag) {\n        return context.slots.default(slotProps());\n    }\n    return {\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\n    };\n};\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n    if (hasValueBinding(el)) {\n        return el._value;\n    }\n    return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n    return '_value' in el;\n}\n\nfunction normalizeEventValue(value) {\n    if (!isEvent(value)) {\n        return value;\n    }\n    const input = value.target;\n    // Vue sets the current bound value on `_value` prop\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n        return getBoundValue(input);\n    }\n    if (input.type === 'file' && input.files) {\n        const files = Array.from(input.files);\n        return input.multiple ? files : files[0];\n    }\n    if (isNativeMultiSelect(input)) {\n        return Array.from(input.options)\n            .filter(opt => opt.selected && !opt.disabled)\n            .map(getBoundValue);\n    }\n    // makes sure we get the actual `option` bound value\n    // #3440\n    if (isNativeSelect(input)) {\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\n    }\n    return input.value;\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n    const acc = {};\n    Object.defineProperty(acc, '_$$isNormalized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n    if (!rules) {\n        return acc;\n    }\n    // Object is already normalized, skip.\n    if (isObject(rules) && rules._$$isNormalized) {\n        return rules;\n    }\n    if (isObject(rules)) {\n        return Object.keys(rules).reduce((prev, curr) => {\n            const params = normalizeParams(rules[curr]);\n            if (rules[curr] !== false) {\n                prev[curr] = buildParams(params);\n            }\n            return prev;\n        }, acc);\n    }\n    /* istanbul ignore if */\n    if (typeof rules !== 'string') {\n        return acc;\n    }\n    return rules.split('|').reduce((prev, rule) => {\n        const parsedRule = parseRule(rule);\n        if (!parsedRule.name) {\n            return prev;\n        }\n        prev[parsedRule.name] = buildParams(parsedRule.params);\n        return prev;\n    }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n    if (params === true) {\n        return [];\n    }\n    if (Array.isArray(params)) {\n        return params;\n    }\n    if (isObject(params)) {\n        return params;\n    }\n    return [params];\n}\nfunction buildParams(provided) {\n    const mapValueToLocator = (value) => {\n        // A target param using interpolation\n        if (typeof value === 'string' && value[0] === '@') {\n            return createLocator(value.slice(1));\n        }\n        return value;\n    };\n    if (Array.isArray(provided)) {\n        return provided.map(mapValueToLocator);\n    }\n    // #3073\n    if (provided instanceof RegExp) {\n        return [provided];\n    }\n    return Object.keys(provided).reduce((prev, key) => {\n        prev[key] = mapValueToLocator(provided[key]);\n        return prev;\n    }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = (rule) => {\n    let params = [];\n    const name = rule.split(':')[0];\n    if (rule.includes(':')) {\n        params = rule.split(':').slice(1).join(':').split(',');\n    }\n    return { name, params };\n};\nfunction createLocator(value) {\n    const locator = (crossTable) => {\n        const val = getFromPath(crossTable, value) || crossTable[value];\n        return val;\n    };\n    locator.__locatorRef = value;\n    return locator;\n}\nfunction extractLocators(params) {\n    if (Array.isArray(params)) {\n        return params.filter(isLocator);\n    }\n    return keysOf(params)\n        .filter(key => isLocator(params[key]))\n        .map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n    generateMessage: ({ field }) => `${field} is not valid.`,\n    bails: true,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validateOnInput: false,\n    validateOnModelUpdate: true,\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = (newConf) => {\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n    const field = {\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n        rules,\n        label: options === null || options === void 0 ? void 0 : options.label,\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\n    };\n    const result = await _validate(field, value);\n    const errors = result.errors;\n    return {\n        errors,\n        valid: !errors.length,\n    };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n    if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n        return validateFieldWithTypedSchema(value, field.rules);\n    }\n    // if a generic function or chain of generic functions\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\n        const ctx = {\n            field: field.label || field.name,\n            name: field.name,\n            label: field.label,\n            form: field.formData,\n            value,\n        };\n        // Normalize the pipeline\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n        const length = pipeline.length;\n        const errors = [];\n        for (let i = 0; i < length; i++) {\n            const rule = pipeline[i];\n            const result = await rule(value, ctx);\n            const isValid = typeof result !== 'string' && result;\n            if (isValid) {\n                continue;\n            }\n            const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n            errors.push(message);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n        return {\n            errors,\n        };\n    }\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\n    const errors = [];\n    const rulesKeys = Object.keys(normalizedContext.rules);\n    const length = rulesKeys.length;\n    for (let i = 0; i < length; i++) {\n        const rule = rulesKeys[i];\n        const result = await _test(normalizedContext, value, {\n            name: rule,\n            params: normalizedContext.rules[rule],\n        });\n        if (result.error) {\n            errors.push(result.error);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n    }\n    return {\n        errors,\n    };\n}\nfunction isYupError(err) {\n    return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n    const schema = {\n        __type: 'VVTypedSchema',\n        async parse(values) {\n            var _a;\n            try {\n                const output = await yupSchema.validate(values, { abortEarly: false });\n                return {\n                    output,\n                    errors: [],\n                };\n            }\n            catch (err) {\n                // Yup errors have a name prop one them.\n                // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n                if (!isYupError(err)) {\n                    throw err;\n                }\n                if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n                    return { errors: [{ path: err.path, errors: err.errors }] };\n                }\n                const errors = err.inner.reduce((acc, curr) => {\n                    const path = curr.path || '';\n                    if (!acc[path]) {\n                        acc[path] = { errors: [], path };\n                    }\n                    acc[path].errors.push(...curr.errors);\n                    return acc;\n                }, {});\n                return { errors: Object.values(errors) };\n            }\n        },\n    };\n    return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const result = await typedSchema.parse(value);\n    const messages = [];\n    for (const error of result.errors) {\n        if (error.errors.length) {\n            messages.push(...error.errors);\n        }\n    }\n    return {\n        errors: messages,\n    };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n    const validator = resolveRule(rule.name);\n    if (!validator) {\n        throw new Error(`No such validator '${rule.name}' exists.`);\n    }\n    const params = fillTargetValues(rule.params, field.formData);\n    const ctx = {\n        field: field.label || field.name,\n        name: field.name,\n        label: field.label,\n        value,\n        form: field.formData,\n        rule: Object.assign(Object.assign({}, rule), { params }),\n    };\n    const result = await validator(value, params, ctx);\n    if (typeof result === 'string') {\n        return {\n            error: result,\n        };\n    }\n    return {\n        error: result ? undefined : _generateFieldError(ctx),\n    };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n    const message = getConfig().generateMessage;\n    if (!message) {\n        return 'Field is invalid';\n    }\n    return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n    const normalize = (value) => {\n        if (isLocator(value)) {\n            return value(crossTable);\n        }\n        return value;\n    };\n    if (Array.isArray(params)) {\n        return params.map(normalize);\n    }\n    return Object.keys(params).reduce((acc, param) => {\n        acc[param] = normalize(params[param]);\n        return acc;\n    }, {});\n}\nasync function validateTypedSchema(schema, values) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const validationResult = await typedSchema.parse(values);\n    const results = {};\n    const errors = {};\n    for (const error of validationResult.errors) {\n        const messages = error.errors;\n        // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n        const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n            return `[${m}]`;\n        });\n        results[path] = { valid: !messages.length, errors: messages };\n        if (messages.length) {\n            errors[path] = messages[0];\n        }\n    }\n    return {\n        valid: !validationResult.errors.length,\n        results,\n        errors,\n        values: validationResult.value,\n    };\n}\nasync function validateObjectSchema(schema, values, opts) {\n    const paths = keysOf(schema);\n    const validations = paths.map(async (path) => {\n        var _a, _b, _c;\n        const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\n            name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n            label: strings === null || strings === void 0 ? void 0 : strings.label,\n            values: values,\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\n        });\n        return Object.assign(Object.assign({}, fieldResult), { path });\n    });\n    let isAllValid = true;\n    const validationResults = await Promise.all(validations);\n    const results = {};\n    const errors = {};\n    for (const result of validationResults) {\n        results[result.path] = {\n            valid: result.valid,\n            errors: result.errors,\n        };\n        if (!result.valid) {\n            isAllValid = false;\n            errors[result.path] = result.errors[0];\n        }\n    }\n    return {\n        valid: isAllValid,\n        results,\n        errors,\n    };\n}\n\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, init.form);\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, init.form);\n    const meta = _useFieldMeta(value, initialValue, errors);\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n    function setState(state) {\n        var _a;\n        if ('value' in state) {\n            value.value = state.value;\n        }\n        if ('errors' in state) {\n            setErrors(state.errors);\n        }\n        if ('touched' in state) {\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n        }\n        if ('initialValue' in state) {\n            setInitialValue(state.initialValue);\n        }\n    }\n    return {\n        id,\n        path,\n        value,\n        initialValue,\n        meta,\n        errors,\n        errorMessage,\n        setState,\n    };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n    const modelRef = ref(unref(modelValue));\n    function resolveInitialValue() {\n        if (!form) {\n            return unref(modelRef);\n        }\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n    }\n    function setInitialValue(value) {\n        if (!form) {\n            modelRef.value = value;\n            return;\n        }\n        form.stageInitialValue(unref(path), value, true);\n    }\n    const initialValue = computed(resolveInitialValue);\n    // if no form is associated, use a regular ref.\n    if (!form) {\n        const value = ref(resolveInitialValue());\n        return {\n            value,\n            initialValue,\n            setInitialValue,\n        };\n    }\n    // to set the initial value, first check if there is a current value, if there is then use it.\n    // otherwise use the configured initial value if it exists.\n    // prioritize model value over form values\n    // #3429\n    const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n    form.stageInitialValue(unref(path), currentValue, true);\n    // otherwise use a computed setter that triggers the `setFieldValue`\n    const value = computed({\n        get() {\n            return getFromPath(form.values, unref(path));\n        },\n        set(newVal) {\n            form.setFieldValue(unref(path), newVal);\n        },\n    });\n    return {\n        value,\n        initialValue,\n        setInitialValue,\n    };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n    if (isRef(modelValue)) {\n        return unref(modelValue);\n    }\n    if (modelValue !== undefined) {\n        return modelValue;\n    }\n    return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n    const meta = reactive({\n        touched: false,\n        pending: false,\n        valid: true,\n        validated: !!unref(errors).length,\n        initialValue: computed(() => unref(initialValue)),\n        dirty: computed(() => {\n            return !isEqual(unref(currentValue), unref(initialValue));\n        }),\n    });\n    watch(errors, value => {\n        meta.valid = !value.length;\n    }, {\n        immediate: true,\n        flush: 'sync',\n    });\n    return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction _useFieldErrors(path, form) {\n    function normalizeErrors(messages) {\n        if (!messages) {\n            return [];\n        }\n        return Array.isArray(messages) ? messages : [messages];\n    }\n    if (!form) {\n        const errors = ref([]);\n        return {\n            errors,\n            errorMessage: computed(() => errors.value[0]),\n            setErrors: (messages) => {\n                errors.value = normalizeErrors(messages);\n            },\n        };\n    }\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\n    return {\n        errors,\n        errorMessage: computed(() => errors.value[0]),\n        setErrors: (messages) => {\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n        },\n    };\n}\n\nfunction installDevtoolsPlugin(app) {\n    if ((process.env.NODE_ENV !== 'production')) {\n        setupDevtoolsPlugin({\n            id: 'vee-validate-devtools-plugin',\n            label: 'VeeValidate Plugin',\n            packageName: 'vee-validate',\n            homepage: 'https://vee-validate.logaretm.com/v4',\n            app,\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\n        }, setupApiHooks);\n    }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n    setTimeout(async () => {\n        await nextTick();\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n    }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FORMS[form.formId];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FIELDS[field.id];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n    error: 0xbd4b4b,\n    success: 0x06d77b,\n    unknown: 0x54436b,\n    white: 0xffffff,\n    black: 0x000000,\n    blue: 0x035397,\n    purple: 0xb980f0,\n    orange: 0xf5a962,\n    gray: 0xbbbfca,\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n    API = api;\n    api.addInspector({\n        id: INSPECTOR_ID,\n        icon: 'rule',\n        label: 'vee-validate',\n        noSelectionText: 'Select a vee-validate node to inspect',\n        actions: [\n            {\n                icon: 'done_outline',\n                tooltip: 'Validate selected item',\n                action: async () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    await SELECTED_NODE.validate();\n                },\n            },\n            {\n                icon: 'delete_sweep',\n                tooltip: 'Clear validation state of the selected item',\n                action: () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if ('id' in SELECTED_NODE) {\n                        SELECTED_NODE.resetField();\n                        return;\n                    }\n                    SELECTED_NODE.resetForm();\n                },\n            },\n        ],\n    });\n    api.on.getInspectorTree(payload => {\n        if (payload.inspectorId !== INSPECTOR_ID) {\n            return;\n        }\n        const forms = Object.values(DEVTOOLS_FORMS);\n        const fields = Object.values(DEVTOOLS_FIELDS);\n        payload.rootNodes = [\n            ...forms.map(mapFormForDevtoolsInspector),\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\n        ];\n    });\n    api.on.getInspectorState((payload, ctx) => {\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n            return;\n        }\n        const { form, field, type } = decodeNodeId(payload.nodeId);\n        if (form && type === 'form') {\n            payload.state = buildFormState(form);\n            SELECTED_NODE = form;\n            return;\n        }\n        if (field && type === 'field') {\n            payload.state = buildFieldState(field);\n            SELECTED_NODE = field;\n            return;\n        }\n        SELECTED_NODE = null;\n    });\n}\nfunction mapFormForDevtoolsInspector(form) {\n    const { textColor, bgColor } = getTagTheme(form);\n    const formTreeNodes = {};\n    Object.values(form.fieldsByPath.value).forEach(field => {\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\n        if (!fieldInstance) {\n            return;\n        }\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n    });\n    function buildFormTree(tree, path = []) {\n        const key = [...path].pop();\n        if ('id' in tree) {\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\n        }\n        if (isObject(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: key || '',\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\n            };\n        }\n        if (Array.isArray(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: `${key}[]`,\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\n            };\n        }\n        return { id: '', label: '', children: [] };\n    }\n    const { children } = buildFormTree(formTreeNodes);\n    return {\n        id: encodeNodeId(form),\n        label: 'Form',\n        children,\n        tags: [\n            {\n                label: 'Form',\n                textColor,\n                backgroundColor: bgColor,\n            },\n            {\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n                textColor: COLORS.white,\n                backgroundColor: COLORS.unknown,\n            },\n        ],\n    };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n    const fieldInstance = normalizeField(field);\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\n    const isGroup = Array.isArray(field) && field.length > 1;\n    return {\n        id: encodeNodeId(form, fieldInstance, !isGroup),\n        label: unref(fieldInstance.name),\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n        tags: [\n            isGroup\n                ? undefined\n                : {\n                    label: 'Field',\n                    textColor,\n                    backgroundColor: bgColor,\n                },\n            !form\n                ? {\n                    label: 'Standalone',\n                    textColor: COLORS.black,\n                    backgroundColor: COLORS.gray,\n                }\n                : undefined,\n            !isGroup && fieldInstance.type === 'checkbox'\n                ? {\n                    label: 'Checkbox',\n                    textColor: COLORS.white,\n                    backgroundColor: COLORS.blue,\n                }\n                : undefined,\n            !isGroup && fieldInstance.type === 'radio'\n                ? {\n                    label: 'Radio',\n                    textColor: COLORS.white,\n                    backgroundColor: COLORS.purple,\n                }\n                : undefined,\n            isGroup\n                ? {\n                    label: 'Group',\n                    textColor: COLORS.black,\n                    backgroundColor: COLORS.orange,\n                }\n                : undefined,\n        ].filter(Boolean),\n    };\n}\nfunction encodeNodeId(form, field, encodeIndex = true) {\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n    let idx;\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\n        idx = fieldGroup.indexOf(field);\n    }\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\n    return btoa(JSON.stringify(idObject));\n}\nfunction decodeNodeId(nodeId) {\n    try {\n        const idObject = JSON.parse(atob(nodeId));\n        const form = DEVTOOLS_FORMS[idObject.f];\n        if (!form && idObject.ff) {\n            const field = DEVTOOLS_FIELDS[idObject.ff];\n            if (!field) {\n                return {};\n            }\n            return {\n                type: idObject.type,\n                field,\n            };\n        }\n        if (!form) {\n            return {};\n        }\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\n        return {\n            type: idObject.type,\n            form,\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\n        };\n    }\n    catch (err) {\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n    }\n    return {};\n}\nfunction buildFieldState(field) {\n    const { errors, meta, value } = field;\n    return {\n        'Field state': [\n            { key: 'errors', value: errors.value },\n            {\n                key: 'initialValue',\n                value: meta.initialValue,\n            },\n            {\n                key: 'currentValue',\n                value: value.value,\n            },\n            {\n                key: 'touched',\n                value: meta.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.valid,\n            },\n        ],\n    };\n}\nfunction buildFormState(form) {\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\n    return {\n        'Form state': [\n            {\n                key: 'submitCount',\n                value: submitCount.value,\n            },\n            {\n                key: 'isSubmitting',\n                value: isSubmitting.value,\n            },\n            {\n                key: 'touched',\n                value: meta.value.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.value.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.value.valid,\n            },\n            {\n                key: 'initialValues',\n                value: meta.value.initialValues,\n            },\n            {\n                key: 'currentValues',\n                value: values,\n            },\n            {\n                key: 'errors',\n                value: keysOf(errorBag.value).reduce((acc, key) => {\n                    var _a;\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n                    if (message) {\n                        acc[key] = message;\n                    }\n                    return acc;\n                }, {}),\n            },\n        ],\n    };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getTagTheme(fieldOrForm) {\n    // const fallbackColors = {\n    //   bgColor: COLORS.unknown,\n    //   textColor: COLORS.white,\n    // };\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n    return {\n        bgColor: isValid ? COLORS.success : COLORS.error,\n        textColor: isValid ? COLORS.black : COLORS.white,\n    };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n        return useCheckboxField(path, rules, opts);\n    }\n    return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, controlled, keepValueOnUnmount, modelPropName, syncVModel, form: controlForm, } = normalizeOptions(opts);\n    const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n    const form = controlForm || injectedForm;\n    const name = lazyToRef(path);\n    // a flag indicating if the field is about to be removed/unmounted.\n    let markedForRemoval = false;\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\n        modelValue,\n        form,\n    });\n    if (syncVModel) {\n        useVModel({ value, prop: modelPropName, handleChange });\n    }\n    /**\n     * Handles common onBlur meta update\n     */\n    const handleBlur = () => {\n        meta.touched = true;\n    };\n    const normalizedRules = computed(() => {\n        let rulesValue = unref(rules);\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n        if (schema && !isYupValidator(schema) && !isTypedSchema(schema)) {\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n        }\n        if (isYupValidator(rulesValue) ||\n            isTypedSchema(rulesValue) ||\n            isCallable(rulesValue) ||\n            Array.isArray(rulesValue)) {\n            return rulesValue;\n        }\n        return normalizeRules(rulesValue);\n    });\n    async function validateCurrentValue(mode) {\n        var _a, _b;\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\n        }\n        return validate(value.value, normalizedRules.value, {\n            name: unref(name),\n            label: unref(label),\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n            bails,\n        });\n    }\n    const validateWithStateMutation = withLatest(async () => {\n        meta.pending = true;\n        meta.validated = true;\n        return validateCurrentValue('validated-only');\n    }, result => {\n        if (markedForRemoval) {\n            result.valid = true;\n            result.errors = [];\n        }\n        setState({ errors: result.errors });\n        meta.pending = false;\n        return result;\n    });\n    const validateValidStateOnly = withLatest(async () => {\n        return validateCurrentValue('silent');\n    }, result => {\n        if (markedForRemoval) {\n            result.valid = true;\n        }\n        meta.valid = result.valid;\n        return result;\n    });\n    function validate$1(opts) {\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n            return validateValidStateOnly();\n        }\n        return validateWithStateMutation();\n    }\n    // Common input/change event handler\n    function handleChange(e, shouldValidate = true) {\n        const newValue = normalizeEventValue(e);\n        value.value = newValue;\n        if (!validateOnValueUpdate && shouldValidate) {\n            validateWithStateMutation();\n        }\n    }\n    // Runs the initial validation\n    onMounted(() => {\n        if (validateOnMount) {\n            return validateWithStateMutation();\n        }\n        // validate self initially if no form was handling this\n        // forms should have their own initial silent validation run to make things more efficient\n        if (!form || !form.validateSchema) {\n            validateValidStateOnly();\n        }\n    });\n    function setTouched(isTouched) {\n        meta.touched = isTouched;\n    }\n    let unwatchValue;\n    let lastWatchedValue = klona(value.value);\n    function watchValue() {\n        unwatchValue = watch(value, (val, oldVal) => {\n            if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\n                return;\n            }\n            const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\n            validateFn();\n            lastWatchedValue = klona(val);\n        }, {\n            deep: true,\n        });\n    }\n    watchValue();\n    function resetField(state) {\n        var _a;\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\n        setState({\n            value: klona(newValue),\n            initialValue: klona(newValue),\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\n        });\n        meta.pending = false;\n        meta.validated = false;\n        validateValidStateOnly();\n        // need to watch at next tick to avoid triggering the value watcher\n        nextTick(() => {\n            watchValue();\n        });\n    }\n    function setValue(newValue) {\n        value.value = newValue;\n    }\n    function setErrors(errors) {\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\n    }\n    const field = {\n        id,\n        name,\n        label,\n        value,\n        meta,\n        errors,\n        errorMessage,\n        type,\n        checkedValue,\n        uncheckedValue,\n        bails,\n        keepValueOnUnmount,\n        resetField,\n        handleReset: () => resetField(),\n        validate: validate$1,\n        handleChange,\n        handleBlur,\n        setState,\n        setTouched,\n        setErrors,\n        setValue,\n    };\n    provide(FieldContextKey, field);\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\n        watch(rules, (value, oldValue) => {\n            if (isEqual(value, oldValue)) {\n                return;\n            }\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }, {\n            deep: true,\n        });\n    }\n    if ((process.env.NODE_ENV !== 'production')) {\n        field._vm = getCurrentInstance();\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\n            deep: true,\n        });\n        if (!form) {\n            registerSingleFieldWithDevtools(field);\n        }\n    }\n    // if no associated form return the field API immediately\n    if (!form) {\n        return field;\n    }\n    // associate the field with the given form\n    form.register(field);\n    onBeforeUnmount(() => {\n        markedForRemoval = true;\n        form.unregister(field);\n    });\n    // extract cross-field dependencies in a computed prop\n    const dependencies = computed(() => {\n        const rulesVal = normalizedRules.value;\n        // is falsy, a function schema or a yup schema\n        if (!rulesVal ||\n            isCallable(rulesVal) ||\n            isYupValidator(rulesVal) ||\n            isTypedSchema(rulesVal) ||\n            Array.isArray(rulesVal)) {\n            return {};\n        }\n        return Object.keys(rulesVal).reduce((acc, rule) => {\n            const deps = extractLocators(rulesVal[rule])\n                .map((dep) => dep.__locatorRef)\n                .reduce((depAcc, depName) => {\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\n                if (depValue !== undefined) {\n                    depAcc[depName] = depValue;\n                }\n                return depAcc;\n            }, {});\n            Object.assign(acc, deps);\n            return acc;\n        }, {});\n    });\n    // Adds a watcher that runs the validation whenever field dependencies change\n    watch(dependencies, (deps, oldDeps) => {\n        // Skip if no dependencies or if the field wasn't manipulated\n        if (!Object.keys(deps).length) {\n            return;\n        }\n        const shouldValidate = !isEqual(deps, oldDeps);\n        if (shouldValidate) {\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }\n    });\n    return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n    var _a;\n    const defaults = () => ({\n        initialValue: undefined,\n        validateOnMount: false,\n        bails: true,\n        label: undefined,\n        validateOnValueUpdate: true,\n        keepValueOnUnmount: undefined,\n        modelPropName: 'modelValue',\n        syncVModel: true,\n        controlled: true,\n    });\n    const isVModelSynced = (_a = opts === null || opts === void 0 ? void 0 : opts.syncVModel) !== null && _a !== void 0 ? _a : true;\n    const initialValue = isVModelSynced && !('initialValue' in (opts || {}))\n        ? getCurrentModelValue(getCurrentInstance(), (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue')\n        : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n    if (!opts) {\n        return Object.assign(Object.assign({}, defaults()), { initialValue });\n    }\n    // TODO: Deprecate this in next major release\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n    const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { initialValue, controlled: controlled !== null && controlled !== void 0 ? controlled : true, checkedValue });\n}\n/**\n * Extracts the validation rules from a schema\n */\nfunction extractRuleFromSchema(schema, fieldName) {\n    // no schema at all\n    if (!schema) {\n        return undefined;\n    }\n    // there is a key on the schema object for this field\n    return schema[fieldName];\n}\nfunction useCheckboxField(name, rules, opts) {\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n    function patchCheckboxApi(field) {\n        const handleChange = field.handleChange;\n        const checked = computed(() => {\n            const currentValue = unref(field.value);\n            const checkedVal = unref(checkedValue);\n            return Array.isArray(currentValue)\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\n                : isEqual(checkedVal, currentValue);\n        });\n        function handleCheckboxChange(e, shouldValidate = true) {\n            var _a;\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n                if (shouldValidate) {\n                    field.validate();\n                }\n                return;\n            }\n            let newValue = normalizeEventValue(e);\n            // Single checkbox field without a form to toggle it's value\n            if (!form) {\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n            }\n            handleChange(newValue, shouldValidate);\n        }\n        return Object.assign(Object.assign({}, field), { checked,\n            checkedValue,\n            uncheckedValue, handleChange: handleCheckboxChange });\n    }\n    return patchCheckboxApi(_useField(name, rules, opts));\n}\nfunction useVModel({ prop, value, handleChange }) {\n    const vm = getCurrentInstance();\n    /* istanbul ignore next */\n    if (!vm) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\n        }\n        return;\n    }\n    const propName = prop || 'modelValue';\n    const emitName = `update:${propName}`;\n    // Component doesn't have a model prop setup (must be defined on the props)\n    if (!(propName in vm.props)) {\n        return;\n    }\n    watch(value, newValue => {\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n            return;\n        }\n        vm.emit(emitName, newValue);\n    });\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\n        if (propValue === IS_ABSENT && value.value === undefined) {\n            return;\n        }\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\n        if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\n            return;\n        }\n        handleChange(newValue);\n    });\n}\nfunction getCurrentModelValue(vm, propName) {\n    if (!vm) {\n        return undefined;\n    }\n    return vm.props[propName];\n}\n\nconst FieldImpl = defineComponent({\n    name: 'Field',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: [String, Object],\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n        rules: {\n            type: [Object, String, Function],\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        validateOnBlur: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnChange: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnInput: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnModelUpdate: {\n            type: Boolean,\n            default: undefined,\n        },\n        bails: {\n            type: Boolean,\n            default: () => getConfig().bails,\n        },\n        label: {\n            type: String,\n            default: undefined,\n        },\n        uncheckedValue: {\n            type: null,\n            default: undefined,\n        },\n        modelValue: {\n            type: null,\n            default: IS_ABSENT,\n        },\n        modelModifiers: {\n            type: null,\n            default: () => ({}),\n        },\n        'onUpdate:modelValue': {\n            type: null,\n            default: undefined,\n        },\n        standalone: {\n            type: Boolean,\n            default: false,\n        },\n        keepValue: {\n            type: Boolean,\n            default: undefined,\n        },\n    },\n    setup(props, ctx) {\n        const rules = toRef(props, 'rules');\n        const name = toRef(props, 'name');\n        const label = toRef(props, 'label');\n        const uncheckedValue = toRef(props, 'uncheckedValue');\n        const keepValue = toRef(props, 'keepValue');\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\n            validateOnMount: props.validateOnMount,\n            bails: props.bails,\n            standalone: props.standalone,\n            type: ctx.attrs.type,\n            initialValue: resolveInitialValue(props, ctx),\n            // Only for checkboxes and radio buttons\n            checkedValue: ctx.attrs.value,\n            uncheckedValue,\n            label,\n            validateOnValueUpdate: false,\n            keepValueOnUnmount: keepValue,\n        });\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n            handleChange(e, shouldValidate);\n            ctx.emit('update:modelValue', value.value);\n        };\n        const handleInput = (e) => {\n            if (!hasCheckedAttr(ctx.attrs.type)) {\n                value.value = normalizeEventValue(e);\n            }\n        };\n        const onInputHandler = function handleInputWithModel(e) {\n            handleInput(e);\n            ctx.emit('update:modelValue', value.value);\n        };\n        const fieldProps = computed(() => {\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n            const attrs = {\n                name: props.name,\n                onBlur: baseOnBlur,\n                onInput: baseOnInput,\n                onChange: baseOnChange,\n            };\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\n                attrs.checked = checked.value;\n            }\n            const tag = resolveTag(props, ctx);\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\n                attrs.value = value.value;\n            }\n            return attrs;\n        });\n        function slotProps() {\n            return {\n                field: fieldProps.value,\n                value: value.value,\n                meta,\n                errors: errors.value,\n                errorMessage: errorMessage.value,\n                validate: validateField,\n                resetField,\n                handleChange: onChangeHandler,\n                handleInput: onInputHandler,\n                handleReset,\n                handleBlur,\n                setTouched,\n                setErrors,\n            };\n        }\n        ctx.expose({\n            setErrors,\n            setTouched,\n            reset: resetField,\n            validate: validateField,\n            handleChange,\n        });\n        return () => {\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (tag) {\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n            }\n            return children;\n        };\n    },\n});\nfunction resolveTag(props, ctx) {\n    let tag = props.as || '';\n    if (!props.as && !ctx.slots.default) {\n        tag = 'input';\n    }\n    return tag;\n}\nfunction resolveValidationTriggers(props) {\n    var _a, _b, _c, _d;\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\n    return {\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\n    };\n}\nfunction resolveInitialValue(props, ctx) {\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n    if (!hasCheckedAttr(ctx.attrs.type)) {\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n    }\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\nfunction resolveInitialValues(opts) {\n    const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n    const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n    if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n        return klona(schema.cast(providedValues) || {});\n    }\n    return klona(providedValues);\n}\nfunction useForm(opts) {\n    var _a;\n    const formId = FORM_COUNTER++;\n    const controlledModelPaths = new Set();\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n    let RESET_LOCK = false;\n    // A lookup containing fields or field groups\n    const fieldsByPath = ref({});\n    // If the form is currently submitting\n    const isSubmitting = ref(false);\n    // The number of times the user tried to submit the form\n    const submitCount = ref(0);\n    // field arrays managed by this form\n    const fieldArrays = [];\n    // a private ref for all form values\n    const formValues = reactive(resolveInitialValues(opts));\n    // the source of errors for the form fields\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\n    // Gets the first error of each field\n    const errors = computed(() => {\n        return keysOf(errorBag.value).reduce((acc, key) => {\n            const bag = errorBag.value[key];\n            if (bag && bag.length) {\n                acc[key] = bag[0];\n            }\n            return acc;\n        }, {});\n    });\n    function getFirstFieldAtPath(path) {\n        const fieldOrGroup = fieldsByPath.value[path];\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n    }\n    function fieldExists(path) {\n        return !!fieldsByPath.value[path];\n    }\n    /**\n     * Holds a computed reference to all fields names and labels\n     */\n    const fieldNames = computed(() => {\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\n            const field = getFirstFieldAtPath(path);\n            if (field) {\n                names[path] = { name: unref(field.name) || '', label: unref(field.label) || '' };\n            }\n            return names;\n        }, {});\n    });\n    const fieldBailsMap = computed(() => {\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\n            var _a;\n            const field = getFirstFieldAtPath(path);\n            if (field) {\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n            }\n            return map;\n        }, {});\n    });\n    // mutable non-reactive reference to initial errors\n    // we need this to process initial errors then unset them\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n    // initial form values\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts);\n    // form meta aggregations\n    const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\n    const controlledValues = computed(() => {\n        return [...controlledModelPaths, ...keysOf(fieldsByPath.value)].reduce((acc, path) => {\n            const value = getFromPath(formValues, path);\n            setInPath(acc, path, value);\n            return acc;\n        }, {});\n    });\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n    /**\n     * Batches validation runs in 5ms batches\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\n     */\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\n    const validateSchema = withLatest(async (mode) => {\n        return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n    }, (formResult, [mode]) => {\n        // fields by id lookup\n        const fieldsById = formCtx.fieldsByPath.value || {};\n        // errors fields names, we need it to also check if custom errors are updated\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n        // collect all the keys from the schema and all fields\n        // this ensures we have a complete keymap of all the fields\n        const paths = [\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\n        ];\n        // aggregates the paths into a single result object while applying the results on the fields\n        return paths.reduce((validation, path) => {\n            const field = fieldsById[path];\n            const messages = (formResult.results[path] || { errors: [] }).errors;\n            const fieldResult = {\n                errors: messages,\n                valid: !messages.length,\n            };\n            validation.results[path] = fieldResult;\n            if (!fieldResult.valid) {\n                validation.errors[path] = fieldResult.errors[0];\n            }\n            // field not rendered\n            if (!field) {\n                setFieldError(path, messages);\n                return validation;\n            }\n            // always update the valid flag regardless of the mode\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\n            if (mode === 'silent') {\n                return validation;\n            }\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n            if (mode === 'validated-only' && !wasValidated) {\n                return validation;\n            }\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\n            return validation;\n        }, { valid: formResult.valid, results: {}, errors: {} });\n    });\n    function makeSubmissionFactory(onlyControlled) {\n        return function submitHandlerFactory(fn, onValidationError) {\n            return function submissionHandler(e) {\n                if (e instanceof Event) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                // Touch all fields\n                setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n                    acc[field] = true;\n                    return acc;\n                }, {}));\n                isSubmitting.value = true;\n                submitCount.value++;\n                return validate()\n                    .then(result => {\n                    const values = klona(formValues);\n                    if (result.valid && typeof fn === 'function') {\n                        const controlled = klona(controlledValues.value);\n                        let submittedValues = onlyControlled ? controlled : values;\n                        if (result.values) {\n                            submittedValues = result.values;\n                        }\n                        return fn(submittedValues, {\n                            evt: e,\n                            controlledValues: controlled,\n                            setErrors,\n                            setFieldError,\n                            setTouched,\n                            setFieldTouched,\n                            setValues,\n                            setFieldValue,\n                            resetForm,\n                            resetField,\n                        });\n                    }\n                    if (!result.valid && typeof onValidationError === 'function') {\n                        onValidationError({\n                            values,\n                            evt: e,\n                            errors: result.errors,\n                            results: result.results,\n                        });\n                    }\n                })\n                    .then(returnVal => {\n                    isSubmitting.value = false;\n                    return returnVal;\n                }, err => {\n                    isSubmitting.value = false;\n                    // re-throw the err so it doesn't go silent\n                    throw err;\n                });\n            };\n        };\n    }\n    const handleSubmitImpl = makeSubmissionFactory(false);\n    const handleSubmit = handleSubmitImpl;\n    handleSubmit.withControlled = makeSubmissionFactory(true);\n    const formCtx = {\n        formId,\n        fieldsByPath,\n        values: formValues,\n        controlledValues,\n        errorBag,\n        errors,\n        schema,\n        submitCount,\n        meta,\n        isSubmitting,\n        fieldArrays,\n        keepValuesOnUnmount,\n        validateSchema: unref(schema) ? validateSchema : undefined,\n        validate,\n        register: registerField,\n        unregister: unregisterField,\n        setFieldErrorBag,\n        validateField,\n        setFieldValue,\n        setValues,\n        setErrors,\n        setFieldError,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        handleSubmit,\n        stageInitialValue,\n        unsetInitialValue,\n        setFieldInitialValue,\n        useFieldModel,\n    };\n    function isFieldGroup(fieldOrGroup) {\n        return Array.isArray(fieldOrGroup);\n    }\n    function applyFieldMutation(fieldOrGroup, mutation) {\n        if (Array.isArray(fieldOrGroup)) {\n            return fieldOrGroup.forEach(mutation);\n        }\n        return mutation(fieldOrGroup);\n    }\n    function mutateAllFields(mutation) {\n        Object.values(fieldsByPath.value).forEach(field => {\n            if (!field) {\n                return;\n            }\n            // avoid resetting the field values, because they should've been reset already.\n            applyFieldMutation(field, mutation);\n        });\n    }\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldError(field, message) {\n        setFieldErrorBag(field, message);\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrors(fields) {\n        setErrorBag(fields);\n    }\n    /**\n     * Sets a single field value\n     */\n    function setFieldValue(field, value, { force } = { force: false }) {\n        var _a;\n        const fieldInstance = fieldsByPath.value[field];\n        const clonedValue = klona(value);\n        // field wasn't found, create a virtual field as a placeholder\n        if (!fieldInstance) {\n            setInPath(formValues, field, clonedValue);\n            return;\n        }\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n            // Multiple checkboxes, and only one of them got updated\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n            setInPath(formValues, field, newValue);\n            return;\n        }\n        let newValue = clonedValue;\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n        }\n        setInPath(formValues, field, newValue);\n    }\n    /**\n     * Sets multiple fields values\n     */\n    function setValues(fields) {\n        // clean up old values\n        keysOf(formValues).forEach(key => {\n            delete formValues[key];\n        });\n        // set up new values\n        keysOf(fields).forEach(path => {\n            setFieldValue(path, fields[path]);\n        });\n        // regenerate the arrays when the form values change\n        fieldArrays.forEach(f => f && f.reset());\n    }\n    function createModel(path) {\n        const { value } = _useFieldValue(path, undefined, formCtx);\n        watch(value, () => {\n            if (!fieldExists(unref(path))) {\n                validate({ mode: 'validated-only' });\n            }\n        }, {\n            deep: true,\n        });\n        controlledModelPaths.add(unref(path));\n        return value;\n    }\n    function useFieldModel(path) {\n        if (!Array.isArray(path)) {\n            return createModel(path);\n        }\n        return path.map(createModel);\n    }\n    /**\n     * Sets the touched meta state on a field\n     */\n    function setFieldTouched(field, isTouched) {\n        const fieldInstance = fieldsByPath.value[field];\n        if (fieldInstance) {\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n        }\n    }\n    /**\n     * Sets the touched meta state on multiple fields\n     */\n    function setTouched(fields) {\n        keysOf(fields).forEach(field => {\n            setFieldTouched(field, !!fields[field]);\n        });\n    }\n    function resetField(field, state) {\n        const fieldInstance = fieldsByPath.value[field];\n        if (fieldInstance) {\n            applyFieldMutation(fieldInstance, f => f.resetField(state));\n        }\n    }\n    /**\n     * Resets all fields\n     */\n    function resetForm(state) {\n        RESET_LOCK = true;\n        // Reset all field states first\n        mutateAllFields(f => f.resetField());\n        // reset values\n        const newValues = (state === null || state === void 0 ? void 0 : state.values) ? state.values : originalInitialValues.value;\n        setInitialValues(newValues);\n        setValues(newValues);\n        if (state === null || state === void 0 ? void 0 : state.touched) {\n            setTouched(state.touched);\n        }\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n        nextTick(() => {\n            RESET_LOCK = false;\n        });\n    }\n    function insertFieldAtPath(field, path) {\n        const rawField = markRaw(field);\n        const fieldPath = path;\n        // first field at that path\n        if (!fieldsByPath.value[fieldPath]) {\n            fieldsByPath.value[fieldPath] = rawField;\n            return;\n        }\n        const fieldAtPath = fieldsByPath.value[fieldPath];\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\n        }\n        // add the new array to that path\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n    }\n    function removeFieldFromPath(field, path) {\n        const fieldPath = path;\n        const fieldAtPath = fieldsByPath.value[fieldPath];\n        if (!fieldAtPath) {\n            return;\n        }\n        // same field at path\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n            delete fieldsByPath.value[fieldPath];\n            return;\n        }\n        if (isFieldGroup(fieldAtPath)) {\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\n            if (idx === -1) {\n                return;\n            }\n            fieldAtPath.splice(idx, 1);\n            if (!fieldAtPath.length) {\n                delete fieldsByPath.value[fieldPath];\n            }\n        }\n    }\n    function registerField(field) {\n        const fieldPath = unref(field.name);\n        insertFieldAtPath(field, fieldPath);\n        if (isRef(field.name)) {\n            // ensures when a field's name was already taken that it preserves its same value\n            // necessary for fields generated by loops\n            watch(field.name, async (newPath, oldPath) => {\n                // cache the value\n                await nextTick();\n                removeFieldFromPath(field, oldPath);\n                insertFieldAtPath(field, newPath);\n                // re-validate if either path had errors before\n                if (errors.value[oldPath] || errors.value[newPath]) {\n                    // clear up both paths errors\n                    setFieldError(oldPath, undefined);\n                    validateField(newPath);\n                }\n                // clean up the old path if no other field is sharing that name\n                // #3325\n                await nextTick();\n                if (!fieldExists(oldPath)) {\n                    unsetPath(formValues, oldPath);\n                }\n            });\n        }\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n        // #3342\n        const initialErrorMessage = unref(field.errorMessage);\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n            validateField(fieldPath);\n        }\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n        delete initialErrors[fieldPath];\n    }\n    function unregisterField(field) {\n        const fieldName = unref(field.name);\n        const fieldInstance = fieldsByPath.value[fieldName];\n        const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\n        removeFieldFromPath(field, fieldName);\n        // clears a field error on unmounted\n        // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n        nextTick(() => {\n            var _a;\n            const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\n            const currentGroupValue = getFromPath(formValues, fieldName);\n            // The boolean here is we check if the field still belongs to the same control group with that name\n            // if another group claimed the name, we should avoid handling it since it is no longer the same group\n            // this happens with `v-for` over some checkboxes and field arrays.\n            // also if the group no longer exist we can assume this group was the last one that controlled it\n            const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]);\n            // group field that still has a dangling value, the field may exist or not after it was removed.\n            // This used to be handled in the useField composable but the form has better context on when it should/not happen.\n            // if it does belong to it that means the group still exists\n            // #3844\n            if (isSameGroup && !shouldKeepValue) {\n                if (Array.isArray(currentGroupValue)) {\n                    const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\n                    if (valueIdx > -1) {\n                        const newVal = [...currentGroupValue];\n                        newVal.splice(valueIdx, 1);\n                        setFieldValue(fieldName, newVal, { force: true });\n                    }\n                }\n                else if (currentGroupValue === unref(field.checkedValue)) {\n                    // Remove field if it is a group but does not have an array value, like for radio inputs #3963\n                    unsetPath(formValues, fieldName);\n                }\n            }\n            // Field was removed entirely, we should unset its path\n            // #3384\n            if (!fieldExists(fieldName)) {\n                setFieldError(fieldName, undefined);\n                // Checks if the field was configured to be unset during unmount or not\n                // Checks both the form-level config and field-level one\n                // Field has the priority if it is set, otherwise it goes to the form settings\n                if (shouldKeepValue) {\n                    return;\n                }\n                // Don't apply emptyContainer check unless the current group value is an array\n                if (isGroup && Array.isArray(currentGroupValue) && !isEmptyContainer(currentGroupValue)) {\n                    return;\n                }\n                unsetPath(formValues, fieldName);\n            }\n        });\n    }\n    async function validate(opts) {\n        const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n        if (mode === 'force') {\n            mutateAllFields(f => (f.meta.validated = true));\n        }\n        if (formCtx.validateSchema) {\n            return formCtx.validateSchema(mode);\n        }\n        // No schema, each field is responsible to validate itself\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\n            if (!fieldInstance) {\n                return Promise.resolve({ key: '', valid: true, errors: [] });\n            }\n            return fieldInstance.validate(opts).then((result) => {\n                return {\n                    key: unref(fieldInstance.name),\n                    valid: result.valid,\n                    errors: result.errors,\n                };\n            });\n        }));\n        const results = {};\n        const errors = {};\n        for (const validation of validations) {\n            results[validation.key] = {\n                valid: validation.valid,\n                errors: validation.errors,\n            };\n            if (validation.errors.length) {\n                errors[validation.key] = validation.errors[0];\n            }\n        }\n        return {\n            valid: validations.every(r => r.valid),\n            results,\n            errors,\n        };\n    }\n    async function validateField(field) {\n        const fieldInstance = fieldsByPath.value[field];\n        if (!fieldInstance) {\n            warn$1(`field with name ${field} was not found`);\n            return Promise.resolve({ errors: [], valid: true });\n        }\n        if (Array.isArray(fieldInstance)) {\n            return fieldInstance.map(f => f.validate())[0];\n        }\n        return fieldInstance.validate();\n    }\n    function unsetInitialValue(path) {\n        unsetPath(initialValues.value, path);\n    }\n    /**\n     * Sneaky function to set initial field values\n     */\n    function stageInitialValue(path, value, updateOriginal = false) {\n        setInPath(formValues, path, value);\n        setFieldInitialValue(path, value);\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n            setInPath(originalInitialValues.value, path, klona(value));\n        }\n    }\n    function setFieldInitialValue(path, value) {\n        setInPath(initialValues.value, path, klona(value));\n    }\n    async function _validateSchema() {\n        const schemaValue = unref(schema);\n        if (!schemaValue) {\n            return { valid: true, results: {}, errors: {} };\n        }\n        const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue)\n            ? await validateTypedSchema(schemaValue, formValues)\n            : await validateObjectSchema(schemaValue, formValues, {\n                names: fieldNames.value,\n                bailsMap: fieldBailsMap.value,\n            });\n        return formResult;\n    }\n    const submitForm = handleSubmit((_, { evt }) => {\n        if (isFormSubmitEvent(evt)) {\n            evt.target.submit();\n        }\n    });\n    // Trigger initial validation\n    onMounted(() => {\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n            setErrors(opts.initialErrors);\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n            setTouched(opts.initialTouched);\n        }\n        // if validate on mount was enabled\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n            validate();\n            return;\n        }\n        // otherwise run initial silent validation through schema if available\n        // the useField should skip their own silent validation if a yup schema is present\n        if (formCtx.validateSchema) {\n            formCtx.validateSchema('silent');\n        }\n    });\n    if (isRef(schema)) {\n        watch(schema, () => {\n            var _a;\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n        });\n    }\n    // Provide injections\n    provide(FormContextKey, formCtx);\n    if ((process.env.NODE_ENV !== 'production')) {\n        registerFormWithDevTools(formCtx);\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\n            deep: true,\n        });\n    }\n    return Object.assign(Object.assign({}, formCtx), { handleReset: () => resetForm(), submitForm });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n    const MERGE_STRATEGIES = {\n        touched: 'some',\n        pending: 'some',\n        valid: 'every',\n    };\n    const isDirty = computed(() => {\n        return !isEqual(currentValues, unref(initialValues));\n    });\n    function calculateFlags() {\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n            const mergeMethod = MERGE_STRATEGIES[flag];\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n            return acc;\n        }, {});\n    }\n    const flags = reactive(calculateFlags());\n    watchEffect(() => {\n        const value = calculateFlags();\n        flags.touched = value.touched;\n        flags.valid = value.valid;\n        flags.pending = value.pending;\n    });\n    return computed(() => {\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\n    });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(fields, formValues, opts) {\n    const values = resolveInitialValues(opts);\n    const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n    // these are the mutable initial values as the fields are mounted/unmounted\n    const initialValues = ref(values);\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n    // so these are the values that the reset function should use\n    // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n    const originalInitialValues = ref(klona(values));\n    function setInitialValues(values, updateFields = false) {\n        initialValues.value = klona(values);\n        originalInitialValues.value = klona(values);\n        if (!updateFields) {\n            return;\n        }\n        // update the pristine non-touched fields\n        // those are excluded because it's unlikely you want to change the form values using initial values\n        // we mostly watch them for API population or newly inserted fields\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n        keysOf(fields.value).forEach(fieldPath => {\n            const field = fields.value[fieldPath];\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n            if (!field || wasTouched) {\n                return;\n            }\n            const newValue = getFromPath(initialValues.value, fieldPath);\n            setInPath(formValues, fieldPath, klona(newValue));\n        });\n    }\n    if (isRef(providedValues)) {\n        watch(providedValues, value => {\n            setInitialValues(value, true);\n        }, {\n            deep: true,\n        });\n    }\n    return {\n        initialValues,\n        originalInitialValues,\n        setInitialValues,\n    };\n}\nfunction useErrorBag(initialErrors) {\n    const errorBag = ref({});\n    function normalizeErrorItem(message) {\n        return Array.isArray(message) ? message : message ? [message] : [];\n    }\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldErrorBag(field, message) {\n        if (!message) {\n            delete errorBag.value[field];\n            return;\n        }\n        errorBag.value[field] = normalizeErrorItem(message);\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrorBag(fields) {\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\n            const message = fields[key];\n            if (message) {\n                acc[key] = normalizeErrorItem(message);\n            }\n            return acc;\n        }, {});\n    }\n    if (initialErrors) {\n        setErrorBag(initialErrors);\n    }\n    return {\n        errorBag,\n        setErrorBag,\n        setFieldErrorBag,\n    };\n}\n\nconst FormImpl = defineComponent({\n    name: 'Form',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: String,\n            default: 'form',\n        },\n        validationSchema: {\n            type: Object,\n            default: undefined,\n        },\n        initialValues: {\n            type: Object,\n            default: undefined,\n        },\n        initialErrors: {\n            type: Object,\n            default: undefined,\n        },\n        initialTouched: {\n            type: Object,\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        onSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        onInvalidSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        keepValues: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup(props, ctx) {\n        const initialValues = toRef(props, 'initialValues');\n        const validationSchema = toRef(props, 'validationSchema');\n        const keepValues = toRef(props, 'keepValues');\n        const { errors, errorBag, values, meta, isSubmitting, submitCount, controlledValues, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, resetField, } = useForm({\n            validationSchema: validationSchema.value ? validationSchema : undefined,\n            initialValues,\n            initialErrors: props.initialErrors,\n            initialTouched: props.initialTouched,\n            validateOnMount: props.validateOnMount,\n            keepValuesOnUnmount: keepValues,\n        });\n        const submitForm = handleSubmit((_, { evt }) => {\n            if (isFormSubmitEvent(evt)) {\n                evt.target.submit();\n            }\n        }, props.onInvalidSubmit);\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n        function handleFormReset(e) {\n            if (isEvent(e)) {\n                // Prevent default form reset behavior\n                e.preventDefault();\n            }\n            handleReset();\n            if (typeof ctx.attrs.onReset === 'function') {\n                ctx.attrs.onReset();\n            }\n        }\n        function handleScopedSlotSubmit(evt, onSubmit) {\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n        }\n        function getValues() {\n            return klona(values);\n        }\n        function getMeta() {\n            return klona(meta.value);\n        }\n        function getErrors() {\n            return klona(errors.value);\n        }\n        function slotProps() {\n            return {\n                meta: meta.value,\n                errors: errors.value,\n                errorBag: errorBag.value,\n                values,\n                isSubmitting: isSubmitting.value,\n                submitCount: submitCount.value,\n                controlledValues: controlledValues.value,\n                validate,\n                validateField,\n                handleSubmit: handleScopedSlotSubmit,\n                handleReset,\n                submitForm,\n                setErrors,\n                setFieldError,\n                setFieldValue,\n                setValues,\n                setFieldTouched,\n                setTouched,\n                resetForm,\n                resetField,\n                getValues,\n                getMeta,\n                getErrors,\n            };\n        }\n        // expose these functions and methods as part of public API\n        ctx.expose({\n            setFieldError,\n            setErrors,\n            setFieldValue,\n            setValues,\n            setFieldTouched,\n            setTouched,\n            resetForm,\n            validate,\n            validateField,\n            resetField,\n            getValues,\n            getMeta,\n            getErrors,\n        });\n        return function renderForm() {\n            // avoid resolving the form component as itself\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (!props.as) {\n                return children;\n            }\n            // Attributes to add on a native `form` tag\n            const formAttrs = props.as === 'form'\n                ? {\n                    // Disables native validation as vee-validate will handle it.\n                    novalidate: true,\n                }\n                : {};\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\n        };\n    },\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n    const form = injectWithSelf(FormContextKey, undefined);\n    const fields = ref([]);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const noOp = () => { };\n    const noOpApi = {\n        fields,\n        remove: noOp,\n        push: noOp,\n        swap: noOp,\n        insert: noOp,\n        update: noOp,\n        replace: noOp,\n        prepend: noOp,\n        move: noOp,\n    };\n    if (!form) {\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n        return noOpApi;\n    }\n    if (!unref(arrayPath)) {\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n        return noOpApi;\n    }\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n    if (alreadyExists) {\n        return alreadyExists;\n    }\n    let entryCounter = 0;\n    function getCurrentValues() {\n        return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    }\n    function initFields() {\n        const currentValues = getCurrentValues();\n        fields.value = currentValues.map(createEntry);\n        updateEntryFlags();\n    }\n    initFields();\n    function updateEntryFlags() {\n        const fieldsLength = fields.value.length;\n        for (let i = 0; i < fieldsLength; i++) {\n            const entry = fields.value[i];\n            entry.isFirst = i === 0;\n            entry.isLast = i === fieldsLength - 1;\n        }\n    }\n    function createEntry(value) {\n        const key = entryCounter++;\n        const entry = {\n            key,\n            value: computedDeep({\n                get() {\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    return idx === -1 ? value : currentValues[idx];\n                },\n                set(value) {\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    if (idx === -1) {\n                        warn(`Attempting to update a non-existent array item`);\n                        return;\n                    }\n                    update(idx, value);\n                },\n            }),\n            isFirst: false,\n            isLast: false,\n        };\n        return entry;\n    }\n    function afterMutation() {\n        updateEntryFlags();\n        // Should trigger a silent validation since a field may not do that #4096\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'silent' });\n    }\n    function remove(idx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!pathValue || !Array.isArray(pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        newValue.splice(idx, 1);\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value.splice(idx, 1);\n        afterMutation();\n    }\n    function push(value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [...normalizedPathValue];\n        newValue.push(value);\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value.push(createEntry(value));\n        afterMutation();\n    }\n    function swap(indexA, indexB) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        // the old switcheroo\n        const temp = newValue[indexA];\n        newValue[indexA] = newValue[indexB];\n        newValue[indexB] = temp;\n        const tempEntry = newFields[indexA];\n        newFields[indexA] = newFields[indexB];\n        newFields[indexB] = tempEntry;\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value = newFields;\n        updateEntryFlags();\n    }\n    function insert(idx, value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        newValue.splice(idx, 0, value);\n        newFields.splice(idx, 0, createEntry(value));\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    function replace(arr) {\n        const pathName = unref(arrayPath);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n        initFields();\n        afterMutation();\n    }\n    function update(idx, value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n            return;\n        }\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'validated-only' });\n    }\n    function prepend(value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [value, ...normalizedPathValue];\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value.unshift(createEntry(value));\n        afterMutation();\n    }\n    function move(oldIdx, newIdx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n            return;\n        }\n        const newFields = [...fields.value];\n        const movedItem = newFields[oldIdx];\n        newFields.splice(oldIdx, 1);\n        newFields.splice(newIdx, 0, movedItem);\n        const movedValue = newValue[oldIdx];\n        newValue.splice(oldIdx, 1);\n        newValue.splice(newIdx, 0, movedValue);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    const fieldArrayCtx = {\n        fields,\n        remove,\n        push,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move,\n    };\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\n    onBeforeUnmount(() => {\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n        if (idx >= 0) {\n            form.fieldArrays.splice(idx, 1);\n        }\n    });\n    // Makes sure to sync the form values with the array value if they go out of sync\n    // #4153\n    watch(getCurrentValues, formValues => {\n        const fieldsValues = fields.value.map(f => f.value);\n        // If form values are not the same as the current values then something overrode them.\n        if (!isEqual(formValues, fieldsValues)) {\n            initFields();\n        }\n    });\n    return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = defineComponent({\n    name: 'FieldArray',\n    inheritAttrs: false,\n    props: {\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\n        function slotProps() {\n            return {\n                fields: fields.value,\n                push,\n                remove,\n                swap,\n                insert,\n                update,\n                replace,\n                prepend,\n                move,\n            };\n        }\n        ctx.expose({\n            push,\n            remove,\n            swap,\n            insert,\n            update,\n            replace,\n            prepend,\n            move,\n        });\n        return () => {\n            const children = normalizeChildren(undefined, ctx, slotProps);\n            return children;\n        };\n    },\n});\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\n    name: 'ErrorMessage',\n    props: {\n        as: {\n            type: String,\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const form = inject(FormContextKey, undefined);\n        const message = computed(() => {\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n        });\n        function slotProps() {\n            return {\n                message: message.value,\n            };\n        }\n        return () => {\n            // Renders nothing if there are no messages\n            if (!message.value) {\n                return undefined;\n            }\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\n            // If no tag was specified and there are children\n            // render the slot as is without wrapping it\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n                return children;\n            }\n            // If no children in slot\n            // render whatever specified and fallback to a <span> with the message in it's contents\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n                return h(tag || 'span', attrs, message.value);\n            }\n            return h(tag, attrs, children);\n        };\n    },\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return function resetForm(state) {\n        if (!form) {\n            return;\n        }\n        return form.resetForm(state);\n    };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return false;\n        }\n        return field.meta.dirty;\n    });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return false;\n        }\n        return field.meta.touched;\n    });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return false;\n        }\n        return field.meta.valid;\n    });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return function validateField() {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return Promise.resolve({\n                errors: [],\n                valid: true,\n            });\n        }\n        return field.validate();\n    };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return function validateField() {\n        if (!form) {\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\n        }\n        return form.validate();\n    };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n    });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n        }\n        return unref(field === null || field === void 0 ? void 0 : field.value);\n    });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\n    });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\n    });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n        }\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n    });\n}\n\nfunction useSubmitForm(cb) {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\n    return function submitForm(e) {\n        if (!onSubmit) {\n            return;\n        }\n        return onSubmit(e);\n    };\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };\n","import { userAccountCheck } from '@/api/user'\n\n// 给vee-validate提供校验规则函数\nexport default {\n  // 用户名校验\n  account (value) {\n    if (!value) return '请输入用户名'\n    // 规则：字母开头6-20字符之间\n    if (!/^[a-zA-Z]\\w{5,19}$/.test(value)) return '字母开头且6-20个字符'\n    return true\n  },\n  // 用户校验且校验唯一性\n  async accountApi (value) {\n    if (!value) return '请输入用户名'\n    if (!/^[a-zA-Z]\\w{5,19}$/.test(value)) return '字母开头且6-20个字符'\n    // 服务器端校验\n    const data = await userAccountCheck(value)\n    if (data.result.valid) return '用户名已存在'\n    return true\n  },\n  // 密码校验\n  password (value) {\n    if (!value) return '请输入密码'\n    // 规则：密码格式6-24个字符\n    if (!/^\\w{6,24}$/.test(value)) return '密码6-24个字符'\n    return true\n  },\n  // 密码校验\n  rePassword (value, { form }) {\n    if (!value) return '请输入密码'\n    if (!/^\\w{6,24}$/.test(value)) return '密码6-24个字符'\n    // form表单数据对象\n    if (value !== form.password) return '需要和密码保持一致'\n    return true\n  },\n  mobile (value) {\n    if (!value) return '请输入手机号'\n    // 规则：1开头 3-9 之间  9个数字\n    if (!/^1[3-9]\\d{9}$/.test(value)) return '手机号格式不对'\n    return true\n  },\n  code (value) {\n    if (!value) return '请输入短信验证码'\n    // 规则： 6个数字\n    if (!/^\\d{6}$/.test(value)) return '短信验证码6个数字'\n    return true\n  },\n  isAgree (value) {\n    if (!value) return '请勾选登录协议'\n    return true\n  }\n}\n","// 用户相关的接口\n\nimport request from '@/utils/request'\n\n/**\n * 帐号密码登录\n * @param {String} account - 帐号\n * @param {String} password - 密码\n * @returns promise\n */\nexport const userAccountLogin = ({ account, password }) => {\n  return request('/login', 'post', { account, password })\n}\n\n/**\n * 获取手机号的短信验证码\n * @param {String} mobile - 手机号\n * @returns promise\n */\nexport const userMobileLoginMsg = (mobile) => {\n  return request('/login/code', 'get', { mobile })\n}\n\n/**\n * 手机号登录\n * @param {String} mobile - 手机号\n * @param {String} code - 短信验证码，默认123456\n * @returns promise\n */\nexport const userMobileLogin = ({ mobile, code }) => {\n  return request('/login/code', 'post', { mobile, code })\n}\n\n/**\n * QQ登录\n * @param {String} unionId - QQ唯一标识，openId\n * @param {String} source - 客户端类型 1 PC\n * @returns\n */\nexport const userQQLogin = (unionId, source = 1) => {\n  return request('/login/social', 'post', { unionId, source })\n}\n\n/**\n * 获取QQ绑定的时候短信验证码\n * @param {String} mobile - 手机号\n * @returns promise\n */\nexport const userQQBindCode = (mobile) => {\n  return request('/login/social/code', 'get', { mobile })\n}\n\n/**\n * QQ登录-绑定帐号\n * @param {String} unionId - QQ唯一标识，openId\n * @param {String} mobile - 手机号\n * @param {String} code - 验证码\n * @returns\n */\nexport const userQQBindLogin = ({ unionId, mobile, code }) => {\n  return request('/login/social/bind', 'post', { unionId, mobile, code })\n}\n\n/**\n * 校验用户是否存在\n * @param {String} account - 帐号\n * @returns promise\n */\nexport const userAccountCheck = (account) => {\n  return request('/register/check', 'get', { account })\n}\n\n/**\n * 获取QQ完善信息的时候短信验证码\n * @param {String} mobile - 手机号\n * @returns promise\n */\nexport const userQQPatchCode = (mobile) => {\n  return request('/register/code', 'get', { mobile })\n}\n\n/**\n * QQ登录-完善信息\n * @param {String} unionId - QQ唯一标识，openId\n * @param {String} mobile - 手机号\n * @param {String} code - 验证码\n * @param {String} account - 帐号\n * @param {String} password - 密码\n * @returns\n */\nexport const userQQPatchLogin = ({ unionId, mobile, code, account, password }) => {\n  return request(`/login/social/${unionId}/complement`, 'post', { unionId, mobile, code, account, password })\n}\n","<template>\n  <header class=\"login-header\">\n    <div class=\"container\">\n      <h1 class=\"logo\"><RouterLink to=\"/\">小兔鲜</RouterLink></h1>\n      <h3 class=\"sub\"><slot /></h3>\n      <RouterLink class=\"entry\" to=\"/\">\n        进入网站首页\n        <i class=\"iconfont icon-angle-right\"></i>\n        <i class=\"iconfont icon-angle-right\"></i>\n      </RouterLink>\n    </div>\n  </header>\n</template>\n\n<script>\nexport default {\n  name: 'LoginHeader'\n}\n</script>\n\n<style scoped lang='less'>\n.login-header {\n  background: #fff;\n  border-bottom: 1px solid #e4e4e4;\n  .container {\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n  }\n  .logo {\n    width: 200px;\n    a {\n      display: block;\n      height: 132px;\n      width: 100%;\n      text-indent: -9999px;\n      background: url(../../../assets/images/logo.png) no-repeat center 18px / contain;\n    }\n  }\n  .sub {\n    flex: 1;\n    font-size: 24px;\n    font-weight: normal;\n    margin-bottom: 38px;\n    margin-left: 20px;\n    color: #666;\n  }\n  .entry {\n    width: 120px;\n    margin-bottom: 38px;\n    font-size: 16px;\n    i {\n      font-size: 14px;\n      color: @xtxColor;\n      letter-spacing: -5px;\n    }\n  }\n}\n</style>\n","import { render } from \"./login-header.vue?vue&type=template&id=c5a0b528&scoped=true\"\nimport script from \"./login-header.vue?vue&type=script&lang=js\"\nexport * from \"./login-header.vue?vue&type=script&lang=js\"\n\nimport \"./login-header.vue?vue&type=style&index=0&id=c5a0b528&scoped=true&lang=less\"\n\nimport exportComponent from \"/home/runner/work/erabbit-web-front/erabbit-web-front/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c5a0b528\"]])\n\nexport default __exports__"],"sourceRoot":""}